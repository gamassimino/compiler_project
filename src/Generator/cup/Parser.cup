package CodeGenerated;

import ASTClass.*;
import java.util.*;
import java_cup.runtime.*;
import Visitor.*;
import TableOfHash.Hash;

terminal String BOOL, INTEGER, FLOAT;
terminal BREAK, CONTINUE;
terminal IF, ELSE;
terminal FOR, WHILE;
terminal String VOID;
terminal CLASS;
terminal RETURN, EXTERN;
terminal SEMI, COMMA;
terminal LPAREN, RPAREN, LBRACKET, RBRACKET, LKEY, RKEY;
terminal AND, OR, NOT;
terminal PERCENTAGE, DIVIDED,PLUS, MINUS, TIMES;
terminal LESS, LESSOREQ;
terminal GREATER, GREATEROREQ;
terminal EQUALTO, NOTEQUALTO;
terminal ADDASSIGNMENT, SUBASSIGNMENT, ASSIGNMENT;
terminal POINT;
terminal String ID;

terminal IntLiteral NUMBER_I;
terminal FloatLiteral NUMBER_F;
terminal BoolLiteral BOOLEAN_VALUE;

non terminal Expression expr;

non terminal LocationExpr location_expr;
non terminal LocationStmt location_stmt;
non terminal MethodCallExpr method_call_expr;
non terminal MethodCallStmt method_call_stmt;
non terminal Program program;
non terminal List<FieldDecl> field_decl;
non terminal MethodDecl method_decl;
non terminal ClassDecl class_decl;
non terminal Type type;
non terminal Param param;
non terminal Body body;
non terminal Block block;
non terminal Statement statement;
non terminal Statement optional_else;
non terminal Navigation navigation;
non terminal ArrayList<Expression> method_expr;
non terminal Statement lambda;
non terminal ArrayList<FieldDecl> id_list;
non terminal IdName id_name;
non terminal List<List<FieldDecl>> field_decl_list;
non terminal Navigation location_aux;
non terminal ArrayList<Statement> list_statement;
non terminal ArrayList<MethodDecl> method_decl_list;

precedence left OR;
precedence left AND;
precedence left EQUALTO, NOTEQUALTO;
precedence left LESS, LESSOREQ, GREATER, GREATEROREQ;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDED, PERCENTAGE;
precedence left NOT;
precedence left ELSE;

precedence left RPAREN;
precedence left LPAREN;
precedence left LBRACKET;

start with program;

// ### Expression ###
expr ::= location_expr:lo {: RESULT = lo; :}
       | method_call_expr :m_c_e {: RESULT = m_c_e; :}
       | NUMBER_I:in {: RESULT = in; :}
       | NUMBER_F:fl  {: RESULT = fl; :}
       | BOOLEAN_VALUE:bool {: RESULT = bool; :}
       | expr:l PLUS expr:r {: RESULT = new Plus(l, r, lxleft.getLine(),lxleft.getColumn()); :}
       | expr:l MINUS expr:r {: RESULT = new Minus(l, r,lxleft.getLine(),lxleft.getColumn()); :}
       | expr:l TIMES expr:r {: RESULT = new Times(l, r,lxleft.getLine(),lxleft.getColumn()); :}
       | expr:l DIVIDED expr:r {: RESULT = new Divided(l, r,lxleft.getLine(),lxleft.getColumn()); :}
       | expr:l PERCENTAGE expr:r {: RESULT = new Percentage(l, r,lxleft.getLine(),lxleft.getColumn()); :}
       | expr:l LESS expr:r {: RESULT = new Less(l, r,lxleft.getLine(),lxleft.getColumn()); :}
       | expr:l GREATER expr:r {: RESULT = new Greater(l, r,lxleft.getLine(),lxleft.getColumn()); :}
       | expr:l LESSOREQ expr:r {: RESULT = new LessOrEq(l, r,lxleft.getLine(),lxleft.getColumn()); :}
       | expr:l GREATEROREQ expr:r {: RESULT = new GreaterOrEq(l, r,lxleft.getLine(),lxleft.getColumn()); :}
       | expr:l EQUALTO expr:r {: RESULT = new EqualTo(l, r,lxleft.getLine(),lxleft.getColumn()); :}
       | expr:l NOTEQUALTO expr:r {: RESULT = new NotEqualTo(l, r,lxleft.getLine(),lxleft.getColumn()); :}
       | expr:l AND expr:r {: RESULT = new And(l, r,lxleft.getLine(),lxleft.getColumn()); :}
       | expr:l OR expr:r {: RESULT = new Or(l, r,lxleft.getLine(),lxleft.getColumn()); :}
       | MINUS expr:e {: RESULT = new Minus(e,exleft.getLine(),exleft.getColumn()); :}
       | NOT expr:e {: RESULT = new Not(e,exleft.getLine(),exleft.getColumn()) ; :}
       | LPAREN expr:exp RPAREN {: RESULT = exp; :};

// ### Program ###
program ::= class_decl:cl {: RESULT = new Program(cl,clxleft.getLine(),clxleft.getColumn()); :}
          | program:p class_decl:cl {: p.addClass(cl); RESULT = p; :};

// ### Class Declaration ###
class_decl ::= CLASS ID:id LKEY field_decl_list:f_d_l method_decl_list:m_d_l RKEY {: RESULT = new ClassDecl(new IdName(id, idxleft.getLine(),idxleft.getColumn()), f_d_l, m_d_l,f_d_lxleft.getLine(),f_d_lxleft.getColumn()) ;:}
             | CLASS ID:id LKEY field_decl_list:f_d_l RKEY {: RESULT = new ClassDecl(new IdName(id,idxleft.getLine(),idxleft.getColumn()), f_d_l, true,f_d_lxleft.getLine(),f_d_lxleft.getColumn()) ;:}
             | CLASS ID:id LKEY method_decl_list:m_d_l RKEY {: RESULT = new ClassDecl(new IdName(id,idxleft.getLine(),idxleft.getColumn()), m_d_l, false,m_d_lxleft.getLine(),m_d_lxleft.getColumn()) ;:}
             | CLASS ID:id LKEY RKEY {: RESULT = new ClassDecl(new IdName(id,idxleft.getLine(),idxleft.getColumn())) ;:};

// ### Field Declaration ###

field_decl_list ::= field_decl:f_d {: List<List<FieldDecl>> list = new ArrayList<List<FieldDecl>>();
                                      list.add(f_d);
                                      RESULT = list;
                                   :}
                  | field_decl_list:f_d_l field_decl:f_d {: f_d_l.add(f_d); RESULT = f_d_l; :};

field_decl ::= type:t id_list:i_l SEMI {: for (FieldDecl field: i_l){ field.setType(t); field.getId().setType(t); } RESULT = i_l ;:};

// ### Identifier ###
id_list ::= id_name:i_n {: ArrayList<FieldDecl> list = new ArrayList<FieldDecl>();
                      list.add(new FieldDecl(i_n,i_nxleft.getLine(),i_nxleft.getColumn()));
                      RESULT = list;
                    :}
          | id_list:i_l COMMA id_name:i_n {: i_l.add(new FieldDecl(i_n,i_lxleft.getLine(),i_lxleft.getColumn())); RESULT = i_l; :};

// This is never watched
id_name ::= ID:id {: RESULT = new IdName(id,idxleft.getLine(),idxleft.getColumn()) ;:}
          | ID:id LBRACKET expr:s RBRACKET {: RESULT = new IdName(id, s,idxleft.getLine(),idxleft.getColumn()) ;:};

// ### Method Declaration ###
method_decl_list ::= method_decl:m_d {: ArrayList<MethodDecl> list = new ArrayList<MethodDecl>();
                                        list.add(m_d);
                                        RESULT = list;
                                     :}
                   | method_decl_list:m_d_l method_decl:m_d {: m_d_l.add(m_d); RESULT = m_d_l; :};

method_decl ::= type:t ID:id LPAREN param:p RPAREN body:b {: RESULT = new MethodDecl(t, new IdName(id,idxleft.getLine(),idxleft.getColumn()), p, b,txleft.getLine(),txleft.getColumn()) ;:}
              | type:t ID:id LPAREN RPAREN body:b {: RESULT = new MethodDecl(t, new IdName(id,idxleft.getLine(),idxleft.getColumn()), new Param(null), b,txleft.getLine(),txleft.getColumn()) ;:};

// ### Parameters ###
param ::= type:t ID:id {: RESULT = new Param(t, new IdName(id,idxleft.getLine(),idxleft.getColumn())) ;:}
        | type:t ID:id COMMA param:p {: p.addParam(t, new IdName(id,idxleft.getLine(),idxleft.getColumn()));  RESULT = p; :}; // REFACTOR CLASS PARAM

// ### Body ###
body ::=  block:bl {: RESULT = new Body(bl,blxleft.getLine(),blxleft.getColumn()) ;:}
        | EXTERN SEMI {: RESULT = new Body() ;:};

// ### Block ###
block ::= LKEY field_decl_list:f_d_l list_statement:l_s RKEY {: RESULT = new Block(f_d_l, l_s,f_d_lxleft.getLine(),f_d_lxleft.getColumn()) ;:}
        | LKEY field_decl_list:f_d_l RKEY {: RESULT = new Block(f_d_l, false,f_d_lxleft.getLine(),f_d_lxleft.getColumn()) ;:}
        | LKEY list_statement:l_s RKEY {: RESULT = new Block(l_s, true,l_sxleft.getLine(),l_sxleft.getColumn()) ;:}
        | LKEY RKEY {: RESULT = new Block(); :};

// ### List Statement ###
list_statement ::= statement:s {: ArrayList<Statement> list = new ArrayList<Statement>();
                                  list.add(s);
                                  RESULT = list;
                               :}
                 | list_statement:l_s statement:s {: l_s.add(s); RESULT = l_s;:};

// ### Types ###
type ::= INTEGER:i {: RESULT = new Type(i); :}
       | FLOAT:f  {: RESULT = new Type(f); :}
       | BOOL:b {: RESULT = new Type(b); :}
       | ID:id {: RESULT = new Type(id); :}
       | VOID:v {: RESULT = new Type(v); :};

// ### Statements ###
statement ::= location_expr:lo ASSIGNMENT expr:exp SEMI {: RESULT = new Assignment(lo, exp,loxleft.getLine(),loxleft.getColumn()); :}
            | location_expr:lo ADDASSIGNMENT expr:exp SEMI {: RESULT = new AddAssignment(lo, exp,loxleft.getLine(),loxleft.getColumn()); :}
            | location_expr:lo SUBASSIGNMENT expr:exp SEMI {: RESULT = new SubAssignment(lo, exp,loxleft.getLine(),loxleft.getColumn()); :}
            | method_call_stmt:m_c_s SEMI {: RESULT = m_c_s; :}
            | FOR ID:id ASSIGNMENT expr:condition COMMA expr:step statement:s {: RESULT = new ForStmt(new IdName(id,idxleft.getLine(),idxleft.getColumn()), condition, step, s,idxleft.getLine(),idxleft.getColumn()); :}
            | WHILE expr:exp statement:s {: RESULT = new WhileStmt(exp, s,expxleft.getLine(),expxleft.getColumn()); :}
            | IF LPAREN expr:exp RPAREN statement:s optional_else:o_e {: RESULT = new IfStmt(exp, s, o_e,expxleft.getLine(),expxleft.getColumn()); :}
            | RETURN expr:exp SEMI {: RESULT = new ReturnStmt(exp,expxleft.getLine(),expxleft.getColumn()); :}
            | RETURN SEMI {: RESULT = new ReturnStmt(); :}
            | BREAK SEMI {: RESULT = new BreakStmt(); :}
            | CONTINUE SEMI {: RESULT = new ContinueStmt(); :}
            | SEMI
            | block:bl {: RESULT = bl; :};

lambda ::= {: RESULT = null; :};

//                          REVIEW THE ELSE
optional_else ::= ELSE statement:s {: RESULT =  s ;:}
                | lambda:l {: RESULT = l; :} ;

// ### Method Call ###
method_call_stmt ::= ID:id navigation:na LPAREN method_expr:m_e RPAREN {: RESULT = new MethodCallStmt(new IdName(id,idxleft.getLine(),idxleft.getColumn()), na, m_e,naxleft.getLine(),naxleft.getColumn()) ;:}
                   | ID:id LPAREN method_expr:m_e RPAREN {: RESULT = new MethodCallStmt(new IdName(id,idxleft.getLine(),idxleft.getColumn()), m_e,m_exleft.getLine(),m_exleft.getColumn()) ;:}
                   | ID:id navigation:na LPAREN RPAREN {: RESULT = new MethodCallStmt(new IdName(id,idxleft.getLine(),idxleft.getColumn()), na,naxleft.getLine(),naxleft.getColumn()) ;:}
                   | ID:id LPAREN RPAREN {: RESULT = new MethodCallStmt(new IdName(id,idxleft.getLine(),idxleft.getColumn()),idxleft.getLine(),idxleft.getColumn()) ;:};

method_call_expr ::= ID:id navigation:na LPAREN method_expr:m_e RPAREN {: RESULT = new MethodCallExpr(new IdName(id,idxleft.getLine(),idxleft.getColumn()), na, m_e,naxleft.getLine(),naxleft.getColumn()) ;:}
                   | ID:id LPAREN method_expr:m_e RPAREN {: RESULT = new MethodCallExpr(new IdName(id,idxleft.getLine(),idxleft.getColumn()), m_e,m_exleft.getLine(),m_exleft.getColumn()) ;:}
                   | ID:id navigation:na LPAREN RPAREN {: RESULT = new MethodCallExpr(new IdName(id,idxleft.getLine(),idxleft.getColumn()), na,naxleft.getLine(),naxleft.getColumn()) ;:}
                   | ID:id LPAREN RPAREN {: RESULT = new MethodCallExpr(new IdName(id,idxleft.getLine(),idxleft.getColumn()),idxleft.getLine(),idxleft.getColumn()) ;:};

//                         REVIEW THE NAVIGATION
// ### Navigation ###
navigation ::= POINT ID:id {: RESULT = new Navigation( new IdName(id,idxleft.getLine(),idxleft.getColumn()),idxleft.getLine(),idxleft.getColumn()) ;:}
             | POINT ID:id LBRACKET expr:exp RBRACKET {: RESULT = new Navigation( new IdName(id,exp,idxleft.getLine(),idxleft.getColumn()),idxleft.getLine(),idxleft.getColumn()) ;:}
             | navigation:na POINT ID:id {: RESULT = new Navigation(na, new IdName(id,idxleft.getLine(),idxleft.getColumn()),naxleft.getLine(),naxleft.getColumn());:};

//                          REVIEW THE METHOD EXPRESSION
method_expr ::= expr:e {: ArrayList<Expression> list = new ArrayList<Expression>();
                          list.add(e);
                          RESULT = list;
                       :}
              | method_expr:m_e COMMA expr:e {: m_e.add(e); RESULT = m_e; :};

//                          HEREEE DONE !
// ### Location ###
location_expr ::= ID:id {: RESULT = new LocationExpr(new IdName(id,idxleft.getLine(),idxleft.getColumn()),idxleft.getLine(),idxleft.getColumn()) ;:}
                | ID:id LBRACKET expr:s RBRACKET {: RESULT = new LocationExpr(new IdName(id,s,idxleft.getLine(),idxleft.getColumn()),idxleft.getLine(),idxleft.getColumn()) ;:}
                | ID:id navigation:l_a {: RESULT = new LocationExpr(new IdName(id,idxleft.getLine(),idxleft.getColumn()), l_a,l_axleft.getLine(),l_axleft.getColumn()) ;:};
// this never is used
location_stmt ::= ID:id {: RESULT = new LocationStmt(new IdName(id,idxleft.getLine(),idxleft.getColumn()),idxleft.getLine(),idxleft.getColumn()) ;:}
                | ID:id LBRACKET expr:s RBRACKET {: RESULT = new LocationStmt(new IdName(id,s,idxleft.getLine(),idxleft.getColumn()),idxleft.getLine(),idxleft.getColumn()) ;:}
                | ID:id navigation:l_a {: RESULT = new LocationStmt(new IdName(id,idxleft.getLine(),idxleft.getColumn()), l_a,l_axleft.getLine(),l_axleft.getColumn()) ;:};

// location_aux ::= navigation:n {:  RESULT = n; :}
               // | navigation:na LBRACKET expr:exp RBRACKET {: RESULT = new Navigation(na, exp,naxleft.getLine(),naxleft.getColumn()); :};
